"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3794],{28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var d=s(96540);const t={},o=d.createContext(t);function i(e){const n=d.useContext(o);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),d.createElement(o.Provider,{value:n},e.children)}},81898:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>c});const d=JSON.parse('{"id":"auto-docs/screens/OrganizationFunds/modal/FundModal/functions/default","title":"default","description":"Admin Docs","source":"@site/docs/auto-docs/screens/OrganizationFunds/modal/FundModal/functions/default.md","sourceDirName":"auto-docs/screens/OrganizationFunds/modal/FundModal/functions","slug":"/auto-docs/screens/OrganizationFunds/modal/FundModal/functions/default","permalink":"/docs/auto-docs/screens/OrganizationFunds/modal/FundModal/functions/default","draft":false,"unlisted":false,"editUrl":"https://github.com/PalisadoesFoundation/talawa-admin/edit/develop/docs/docs/auto-docs/screens/OrganizationFunds/modal/FundModal/functions/default.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"NO_FUNDS","permalink":"/docs/auto-docs/screens/OrganizationFunds/OrganizationFundsMocks/variables/NO_FUNDS"},"next":{"title":"InterfaceFundModal","permalink":"/docs/auto-docs/screens/OrganizationFunds/modal/FundModal/interfaces/InterfaceFundModal"}}');var t=s(74848),o=s(28453);const i={},a=void 0,l={},c=[{value:"Props",id:"props",level:3},{value:"State",id:"state",level:3},{value:"Methods",id:"methods",level:3},{value:"Parameters",id:"parameters",level:2},{value:"props",id:"props-1",level:3},{value:"deprecatedLegacyContext?",id:"deprecatedlegacycontext",level:3},{value:"Returns",id:"returns",level:2},{value:"CSS Strategy Explanation:",id:"css-strategy-explanation",level:2},{value:"Benefits:",id:"benefits",level:3},{value:"Global CSS Classes used:",id:"global-css-classes-used",level:3}];function r(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/",children:"Admin Docs"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h1,{id:"function-default",children:"Function: default()"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"default"}),"(",(0,t.jsx)(n.code,{children:"props"}),", ",(0,t.jsx)(n.code,{children:"deprecatedLegacyContext"}),"?): ",(0,t.jsx)(n.code,{children:"ReactNode"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Defined in: ",(0,t.jsx)(n.a,{href:"https://github.com/PalisadoesFoundation/talawa-admin/blob/main/src/screens/OrganizationFunds/modal/FundModal.tsx#L69",children:"src/screens/OrganizationFunds/modal/FundModal.tsx:69"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"FundModal"})," component provides a modal dialog for creating or editing a fund.\nIt allows users to input fund details and submit them to the server."]}),"\n",(0,t.jsxs)(n.p,{children:["This component handles both the creation of new funds and the editing of existing funds,\nbased on the ",(0,t.jsx)(n.code,{children:"mode"})," prop. It displays a form with fields for the fund's name, description,\nand other relevant details. Upon submission, it interacts with the GraphQL API to save\nor update the fund details and triggers a refetch of the fund data."]}),"\n",(0,t.jsx)(n.h3,{id:"props",children:"Props"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isOpen"}),": A boolean indicating whether the modal is open or closed."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hide"}),": A function to close the modal."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"refetchFunds"}),": A function to refetch the fund list after a successful operation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fund"}),": The current fund object being edited or ",(0,t.jsx)(n.code,{children:"null"})," if creating a new fund."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"orgId"}),": The ID of the organization to which the fund belongs."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"mode"}),": The mode of the modal, either 'edit' or 'create'."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"state",children:"State"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"}),": The name of the fund."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"description"}),": The description of the fund."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"amount"}),": The amount associated with the fund."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"status"}),": The status of the fund (e.g., active, archived)."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"handleSubmit()"}),": Handles form submission, creates or updates the fund, and triggers a refetch of the fund list."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"handleChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>)"}),": Updates the state based on user input."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(n.h3,{id:"props-1",children:"props"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/auto-docs/screens/OrganizationFunds/modal/FundModal/interfaces/InterfaceFundModal",children:(0,t.jsx)(n.code,{children:"InterfaceFundModal"})})}),"\n",(0,t.jsx)(n.h3,{id:"deprecatedlegacycontext",children:"deprecatedLegacyContext?"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"any"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Deprecated"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"See"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods",children:"React Docs"})}),"\n",(0,t.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"ReactNode"})}),"\n",(0,t.jsx)(n.p,{children:"The rendered modal dialog."}),"\n",(0,t.jsx)(n.h2,{id:"css-strategy-explanation",children:"CSS Strategy Explanation:"}),"\n",(0,t.jsxs)(n.p,{children:["To ensure consistency across the application and reduce duplication, common styles\n(such as button styles) have been moved to the global CSS file. Instead of using\ncomponent-specific classes (e.g., ",(0,t.jsx)(n.code,{children:".greenregbtnOrganizationFundCampaign"}),", ",(0,t.jsx)(n.code,{children:".greenregbtnPledge"}),"), a single reusable\nclass (e.g., .addButton) is now applied."]}),"\n",(0,t.jsx)(n.h3,{id:"benefits",children:"Benefits:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"**Reduces redundant CSS code."}),"\n",(0,t.jsx)(n.li,{children:"**Improves maintainability by centralizing common styles."}),"\n",(0,t.jsx)(n.li,{children:"**Ensures consistent styling across components."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"global-css-classes-used",children:"Global CSS Classes used:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:".switch"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For more details on the reusable classes, refer to the global CSS file."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}}}]);